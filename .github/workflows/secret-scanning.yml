# ABOUTME: GitHub Actions workflow for comprehensive secret scanning across the repository
# ABOUTME: Runs multiple secret detection tools and creates security alerts for findings

name: Secret Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * TUE'  # Weekly deep scan on Tuesdays at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  detect-secrets:
    runs-on: ubuntu-latest
    name: Detect Secrets Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive scanning
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install detect-secrets
      run: |
        pip install detect-secrets[word_list]==1.4.0
        pip install gibberish-detector
    
    - name: Run detect-secrets scan
      run: |
        echo "## Detect-Secrets Scan Results" >> $GITHUB_STEP_SUMMARY
        
        # Run scan and capture output
        if detect-secrets scan --baseline .secrets.baseline --all-files --exclude-files '.*\.md$' --exclude-files 'package-lock\.json' --exclude-files 'node_modules/.*' > secrets-scan-output.txt 2>&1; then
          echo "✅ No new secrets detected" >> $GITHUB_STEP_SUMMARY
        else
          echo "🔍 Potential secrets found - reviewing against baseline" >> $GITHUB_STEP_SUMMARY
          cat secrets-scan-output.txt >> $GITHUB_STEP_SUMMARY
        fi
        
        # Audit the baseline
        detect-secrets audit --baseline .secrets.baseline --report > secrets-audit-report.txt || true
        
        echo "### Baseline Audit Summary" >> $GITHUB_STEP_SUMMARY
        if grep -q "Total secrets in baseline: 0" secrets-audit-report.txt; then
          echo "✅ Baseline is clean" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Baseline contains secrets that need review" >> $GITHUB_STEP_SUMMARY
          cat secrets-audit-report.txt >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload detect-secrets artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: detect-secrets-results
        path: |
          secrets-scan-output.txt
          secrets-audit-report.txt
        retention-days: 30

  trufflehog-scan:
    runs-on: ubuntu-latest
    name: TruffleHog Secret Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog scan
      uses: trufflesecurity/trufflehog@v3.63.2
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --only-verified --exclude-paths=.trufflehogignore --json --no-update
      continue-on-error: true
      
    - name: Upload TruffleHog results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trufflehog-results
        path: trufflehog-results.json
        retention-days: 30

  gitleaks-scan:
    runs-on: ubuntu-latest
    name: GitLeaks Secret Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_ENABLE_COMMENTS: false
      continue-on-error: true
    
    - name: Upload GitLeaks report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gitleaks-report
        path: results.sarif
        retention-days: 30

  semgrep-secrets:
    runs-on: ubuntu-latest
    name: Semgrep Secret Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Semgrep for secrets
      uses: semgrep/semgrep-action@v1
      with:
        config: p/secrets
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      continue-on-error: true
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif
      continue-on-error: true

  security-summary:
    needs: [detect-secrets, trufflehog-scan, gitleaks-scan, semgrep-secrets]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
    
    - name: Create security summary
      run: |
        echo "## 🔒 Secret Scanning Security Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Scan Results:" >> $GITHUB_STEP_SUMMARY
        echo "- **Detect-secrets**: ${{ needs.detect-secrets.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **TruffleHog**: ${{ needs.trufflehog-scan.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **GitLeaks**: ${{ needs.gitleaks-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Semgrep**: ${{ needs.semgrep-secrets.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if any scans found issues
        FAILED_SCANS=0
        if [[ "${{ needs.detect-secrets.result }}" == "failure" ]]; then
          ((FAILED_SCANS++))
        fi
        if [[ "${{ needs.trufflehog-scan.result }}" == "failure" ]]; then
          ((FAILED_SCANS++))
        fi
        if [[ "${{ needs.gitleaks-scan.result }}" == "failure" ]]; then
          ((FAILED_SCANS++))
        fi
        if [[ "${{ needs.semgrep-secrets.result }}" == "failure" ]]; then
          ((FAILED_SCANS++))
        fi
        
        if [[ $FAILED_SCANS -gt 0 ]]; then
          echo "⚠️ **$FAILED_SCANS scan(s) detected potential issues**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review scan artifacts in workflow run" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify if findings are actual secrets" >> $GITHUB_STEP_SUMMARY
          echo "3. Remove any real secrets immediately" >> $GITHUB_STEP_SUMMARY
          echo "4. Update .secrets.baseline if findings are false positives" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **All secret scans passed successfully**" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Create security issue on schedule failure
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🔒 Security Alert: Potential Secrets Detected in Repository',
            body: `## Security Alert: Secret Scanning Failure
            
            The scheduled secret scanning workflow has detected potential secrets in the repository.
            
            ### Scan Details
            - **Date**: ${new Date().toISOString()}
            - **Workflow**: ${context.workflow}
            - **Run ID**: ${context.runId}
            - **Run URL**: ${context.payload.workflow_run?.html_url || 'Check Actions tab'}
            
            ### Immediate Actions Required
            1. **Review** the scan results in the workflow artifacts
            2. **Verify** if detected items are actual secrets
            3. **Remove** any real secrets immediately
            4. **Rotate** any compromised credentials
            5. **Update** baseline files for false positives
            
            ### Scan Tools Used
            - detect-secrets
            - TruffleHog
            - GitLeaks
            - Semgrep
            
            This issue was automatically created by the secret scanning workflow.`,
            labels: ['security', 'secrets', 'urgent']
          });